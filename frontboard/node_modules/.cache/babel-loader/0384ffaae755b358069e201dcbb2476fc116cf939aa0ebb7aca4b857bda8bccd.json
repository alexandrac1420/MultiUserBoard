{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\Downloads\\\\MultiUserBoard\\\\front\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState, useEffect } from 'react';\nimport p5 from 'p5';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [actions, setActions] = useState([]);\n  const [color, setColor] = useState(getRandomColor());\n  const containerRef = useRef(null);\n  const sketch = p => {\n    p.setup = () => {\n      p.createCanvas(700, 410);\n    };\n    p.draw = () => {\n      if (p.mouseIsPressed) {\n        const action = {\n          type: 'draw',\n          x: p.mouseX,\n          y: p.mouseY,\n          color\n        };\n        axios.post('http://localhost:8080/actions', action).then(response => {\n          console.log('Action posted:', response.data);\n        }).catch(error => {\n          console.error('Error posting action:', error);\n        });\n        drawAction(p, action);\n      }\n    };\n  };\n  const drawAction = (p, action) => {\n    if (isValidColor(action.color)) {\n      p.fill(action.color);\n      p.ellipse(action.x, action.y, 20, 20);\n    } else {\n      console.error(`Invalid color: ${action.color}`);\n    }\n  };\n  useEffect(() => {\n    const fetchActions = async () => {\n      try {\n        const result = await axios.get('http://localhost:8080/actions');\n        setActions(result.data);\n      } catch (error) {\n        console.error('Error fetching actions:', error);\n      }\n    };\n    const interval = setInterval(fetchActions, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    const p5Instance = new p5(sketch, containerRef.current);\n    return () => p5Instance.remove();\n  }, []);\n  useEffect(() => {\n    if (containerRef.current) {\n      const p5Instance = new p5(sketch, containerRef.current);\n      actions.forEach(action => drawAction(p5Instance, action));\n    }\n  }, [actions]);\n  const clearBoard = async () => {\n    await axios.post('http://localhost:8080/clear').then(response => {\n      console.log('Board cleared:', response.data);\n    }).catch(error => {\n      console.error('Error clearing board:', error);\n    });\n    setActions([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearBoard,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      id: \"container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YKhpfiOqPl8z96gTe5TG2wfaHmU=\");\n_c = App;\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\nconst isValidColor = strColor => {\n  const s = new Option().style;\n  s.color = strColor;\n  return s.color !== '';\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useRef","useState","useEffect","p5","axios","jsxDEV","_jsxDEV","App","_s","actions","setActions","color","setColor","getRandomColor","containerRef","sketch","p","setup","createCanvas","draw","mouseIsPressed","action","type","x","mouseX","y","mouseY","post","then","response","console","log","data","catch","error","drawAction","isValidColor","fill","ellipse","fetchActions","result","get","interval","setInterval","clearInterval","p5Instance","current","remove","forEach","clearBoard","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","id","_c","letters","i","Math","floor","random","strColor","s","Option","style","$RefreshReg$"],"sources":["C:/Users/alexa/Downloads/MultiUserBoard/front/src/App.js"],"sourcesContent":["import { useRef, useState, useEffect } from 'react';\nimport p5 from 'p5';\nimport axios from 'axios';\n\nfunction App() {\n  const [actions, setActions] = useState([]);\n  const [color, setColor] = useState(getRandomColor());\n  const containerRef = useRef(null);\n\n  const sketch = (p) => {\n    p.setup = () => {\n      p.createCanvas(700, 410);\n    };\n\n    p.draw = () => {\n      if (p.mouseIsPressed) {\n        const action = { type: 'draw', x: p.mouseX, y: p.mouseY, color };\n        axios.post('http://localhost:8080/actions', action)\n          .then(response => {\n            console.log('Action posted:', response.data);\n          })\n          .catch(error => {\n            console.error('Error posting action:', error);\n          });\n        drawAction(p, action);\n      }\n    };\n  };\n\n  const drawAction = (p, action) => {\n    if (isValidColor(action.color)) {\n      p.fill(action.color);\n      p.ellipse(action.x, action.y, 20, 20);\n    } else {\n      console.error(`Invalid color: ${action.color}`);\n    }\n  };\n\n  useEffect(() => {\n    const fetchActions = async () => {\n      try {\n        const result = await axios.get('http://localhost:8080/actions');\n        setActions(result.data);\n      } catch (error) {\n        console.error('Error fetching actions:', error);\n      }\n    };\n\n    const interval = setInterval(fetchActions, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    const p5Instance = new p5(sketch, containerRef.current);\n    return () => p5Instance.remove();\n  }, []);\n\n  useEffect(() => {\n    if (containerRef.current) {\n      const p5Instance = new p5(sketch, containerRef.current);\n      actions.forEach((action) => drawAction(p5Instance, action));\n    }\n  }, [actions]);\n\n  const clearBoard = async () => {\n    await axios.post('http://localhost:8080/clear')\n      .then(response => {\n        console.log('Board cleared:', response.data);\n      })\n      .catch(error => {\n        console.error('Error clearing board:', error);\n      });\n    setActions([]);\n  };\n\n  return (\n    <div>\n      <button onClick={clearBoard}>Clear</button>\n      <div ref={containerRef} id=\"container\"></div>\n    </div>\n  );\n}\n\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\nconst isValidColor = (strColor) => {\n  const s = new Option().style;\n  s.color = strColor;\n  return s.color !== '';\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}